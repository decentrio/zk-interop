// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractMembership

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IMembershipMsgsCommitmentProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsCommitmentProof struct {
	ProofType         uint8
	ExistenceProof    IMembershipMsgsExistenceProof
	NonExistenceProof IMembershipMsgsNonExistenceProof
}

// IMembershipMsgsExistenceProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsExistenceProof struct {
	Key   []byte
	Value [32]byte
	Leaf  IMembershipMsgsLeafOp
	Path  []IMembershipMsgsInnerOp
}

// IMembershipMsgsInnerOp is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsInnerOp struct {
	HashOp uint8
	Prefix []byte
	Suffix []byte
}

// IMembershipMsgsInnerSpec is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsInnerSpec struct {
	ChildOrder      []uint32
	ChildSize       uint32
	MinPrefixLength uint32
	MaxPrefixLength uint32
	EmptyChild      []byte
	HashOp          uint8
}

// IMembershipMsgsKVPair is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsKVPair struct {
	Path  [][]byte
	Value [32]byte
}

// IMembershipMsgsLeafOp is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsLeafOp struct {
	HashOp       uint8
	PrehashKey   uint8
	PrehashValue uint8
	Prefix       []byte
}

// IMembershipMsgsMembershipOutput is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsMembershipOutput struct {
	CommitmentRoot [32]byte
	KvPairs        []IMembershipMsgsKVPair
}

// IMembershipMsgsMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsMerkleProof struct {
	Proofs []IMembershipMsgsCommitmentProof
}

// IMembershipMsgsNonExistenceProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsNonExistenceProof struct {
	Key      []byte
	HasLeft  bool
	Left     IMembershipMsgsExistenceProof
	HasRight bool
	Right    IMembershipMsgsExistenceProof
}

// IMembershipMsgsProofSpec is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsProofSpec struct {
	SpecType                   uint8
	HasLeafSpec                bool
	LeafOp                     IMembershipMsgsLeafOp
	HasInnerSpec               bool
	InnerSpec                  IMembershipMsgsInnerSpec
	MinDepth                   uint32
	MaxDepth                   uint32
	PrehashKeyBeforeComparison bool
}

// ContractMembershipMetaData contains all meta data concerning the ContractMembership contract.
var ContractMembershipMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"compareBytes\",\"inputs\":[{\"name\":\"a\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"b\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"int8\",\"internalType\":\"int8\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getSlice\",\"inputs\":[{\"name\":\"array\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"from\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"iavlSpec\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ProofSpec\",\"components\":[{\"name\":\"specType\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.SpecType\"},{\"name\":\"hasLeafSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"leafOp\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"hasInnerSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"innerSpec\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.InnerSpec\",\"components\":[{\"name\":\"childOrder\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"childSize\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"minPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"emptyChild\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"}]},{\"name\":\"minDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"prehashKeyBeforeComparison\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"membership\",\"inputs\":[{\"name\":\"appHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"kvPairs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.KVPair[]\",\"components\":[{\"name\":\"path\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"merkleProofs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.MerkleProof[]\",\"components\":[{\"name\":\"proofs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.CommitmentProof[]\",\"components\":[{\"name\":\"proofType\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.ProofType\"},{\"name\":\"existenceProof\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"leaf\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.InnerOp[]\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]},{\"name\":\"nonExistenceProof\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.NonExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hasLeft\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"left\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"leaf\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.InnerOp[]\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]},{\"name\":\"hasRight\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"right\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"leaf\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.InnerOp[]\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]}]}]}]}],\"outputs\":[{\"name\":\"output\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.MembershipOutput\",\"components\":[{\"name\":\"commitmentRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"kvPairs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.KVPair[]\",\"components\":[{\"name\":\"path\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tendermintSpec\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ProofSpec\",\"components\":[{\"name\":\"specType\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.SpecType\"},{\"name\":\"hasLeafSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"leafOp\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"hasInnerSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"innerSpec\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.InnerSpec\",\"components\":[{\"name\":\"childOrder\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"childSize\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"minPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"emptyChild\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"}]},{\"name\":\"minDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"prehashKeyBeforeComparison\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"MembershipVerified\",\"inputs\":[{\"name\":\"commitmentRoot\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"pairsCount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NonMembershipVerified\",\"inputs\":[{\"name\":\"commitmentRoot\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes[]\",\"indexed\":false,\"internalType\":\"bytes[]\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"BranchNotFound\",\"inputs\":[{\"name\":\"branch\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"EmptyRequest\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedToVerifyMembership\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InputDataMissing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidExistenceProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidMerkleProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidOffset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidVarint\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MismatchedNumberOfProofs\",\"inputs\":[{\"name\":\"expected\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"actual\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"MissingLeafSpec\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MissingMerkleProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MissingMerkleRoot\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MissingVerifiedValue\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ProvidedKeyValueMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RootMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"VerificationMembershipFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"VerificationNonMembershipFailed\",\"inputs\":[]}]",
	Bin: "0x60808060405234601557612c7b908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80622cf8c01461024557806313542b7a1461005e5780635bf145a214610059578063d259183d146100545763f7b075a81461004f575f80fd5b610914565b61088f565b610770565b346102415760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102415760043560243567ffffffffffffffff8111610241576100b0903690600401610485565b9160443567ffffffffffffffff8111610241576100d1903690600401610485565b92906100db610b65565b508415610219578385036101f1576100f285610b7e565b935f5b86811061015b5761015786867f14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d96101488b61012e6106af565b948486526020860152604051918291829190602083019252565b0390a26040519182918261050e565b0390f35b8061017161016c6001938a88610bd9565b610c19565b6101d5610187610182848789610cce565b610f10565b61018f6110c3565b6101976113d3565b6101a082610a6d565b526101aa81610a6d565b506101b3610aa3565b6101bc82610a7f565b526101c681610a7f565b5083518a60208601519261146d565b6101df8289610a8f565b526101ea8188610a8f565b50016100f5565b7f947d5a84000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f5c220902000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f80fd5b34610241575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102415761015761027e610aa3565b604051918291826103ee565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600211156102c157565b61028a565b600311156102c157565b9060038210156102c15752565b90601f19601f602080948051918291828752018686015e5f8582860101520116010190565b906080606061034a936103168482516102d0565b610328602082015160208601906102d0565b61033a604082015160408601906102d0565b01519181606082015201906102dd565b90565b9060c0810182519060c083528151809152602060e084019201905f5b8181106103d2575050509060a0806103c761034a946103956020880151602087019063ffffffff169052565b60408781015163ffffffff169086015260608781015163ffffffff1690860152608087015185820360808701526102dd565b9401519101906102d0565b825163ffffffff16845260209384019390920191600101610369565b61034a90602081528251610401816102b7565b60208201526104196020840151604083019015159052565b61010060e061045c61043a6040870151846060870152610120860190610302565b6060870151151560808601526080870151601f198683030160a087015261034d565b60a086015163ffffffff1660c08501529460c081015163ffffffff168483015201511515910152565b9181601f840112156102415782359167ffffffffffffffff8311610241576020808501948460051b01011161024157565b9080602083519182815201916020808360051b8301019401925f915b8383106104e157505050505090565b90919293946020806104ff83601f19866001960301875289516102dd565b970193019301919392906104d2565b602081526020606082019280518284015201519160408083015282518091526080820191602060808360051b8301019401925f915b83831061055257505050505090565b9091929394602080827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808560019503018652885190828061059c84516040855260408501906104b6565b93015191015297019301930191939290610543565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610100810190811067ffffffffffffffff8211176105fb57604052565b6105b1565b6080810190811067ffffffffffffffff8211176105fb57604052565b60c0810190811067ffffffffffffffff8211176105fb57604052565b6040810190811067ffffffffffffffff8211176105fb57604052565b6060810190811067ffffffffffffffff8211176105fb57604052565b6020810190811067ffffffffffffffff8211176105fb57604052565b90601f601f19910116810190811067ffffffffffffffff8211176105fb57604052565b604051906106be60408361068c565b565b604051906106be60808361068c565b604051906106be60c08361068c565b604051906106be6101008361068c565b604051906106be60a08361068c565b67ffffffffffffffff81116105fb57601f01601f191660200190565b81601f8201121561024157803590610730826106fd565b9261073e604051948561068c565b8284526020838301011161024157815f926020809301838601378301015290565b90602061034a9281815201906102dd565b346102415760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102415760043567ffffffffffffffff8111610241576107bf903690600401610719565b6024356044359182821161084b5780518311610807576107e28261015794611143565b908160206107ef82611175565b9481860193010160045afa506040519182918261075f565b606460405162461bcd60e51b815260206004820152601a60248201527f52616e67652065786365656473206172726179206c656e6774680000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601860248201527f496e76616c69642072616e67653a2066726f6d203e20746f00000000000000006044820152fd5b346102415760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102415760043567ffffffffffffffff8111610241576108de903690600401610719565b60243567ffffffffffffffff81116102415760209161090461090a923690600401610719565b906111da565b604051905f0b8152f35b34610241575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102415761015761027e6113d3565b6040519061095a826105de565b5f60e08382815282602082015260405161097381610600565b838152836020820152836040820152606080820152604082015282606082015260405161099f8161061c565b60608152836020820152836040820152836060820152606060808201528360a082015260808201528260a08201528260c08201520152565b604051906109e660208361068c565b5f8252565b604051906109fa60408361068c565b600182525f6020830152565b67ffffffffffffffff81116105fb5760051b60200190565b60405160609190610a2f838261068c565b6002815291601f1901366020840137565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b805115610a7a5760200190565b610a40565b805160011015610a7a5760400190565b8051821015610a7a5760209160051b010190565b610aab61094d565b50610ab46106c0565b600181525f602082015260016040820152610acd6109eb565b6060820152610ada610a1e565b5f610ae482610a6d565b52610af7610af182610a7f565b60019052565b610aff6106cf565b9081526020808201526001604082015260016060820152610b1e6109d7565b6080820152600160a0820152610b326106de565b6001815291600160208401525b60408301526001606083015260808201525f60a08201525f60c08201525f60e082015290565b60405190610b7282610638565b60606020835f81520152565b90610b8882610a06565b610b95604051918261068c565b828152601f19610ba58294610a06565b01905f5b828110610bb557505050565b602090604051610bc481610638565b606081525f8382015282828501015201610ba9565b9190811015610a7a5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc181360301821215610241570190565b6040813603126102415760405190610c3082610638565b803567ffffffffffffffff811161024157810136601f82011215610241578035610c5981610a06565b91610c67604051938461068c565b81835260208084019260051b820101903682116102415760208101925b828410610c9f57505050509060209183520135602082015290565b833567ffffffffffffffff811161024157602091610cc38392833691870101610719565b815201930192610c84565b9190811015610a7a5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610241570190565b3590600382101561024157565b91906080838203126102415760405190610d3482610600565b8193610d3f81610d0e565b8352610d4d60208201610d0e565b6020840152610d5e60408201610d0e565b604084015260608101359167ffffffffffffffff831161024157606092610d859201610719565b910152565b9080601f8301121561024157813591610da283610a06565b92610db0604051948561068c565b80845260208085019160051b830101918383116102415760208101915b838310610ddc57505050505090565b823567ffffffffffffffff8111610241578201906060601f1983880301126102415760405190610e0b82610654565b610e1760208401610d0e565b8252604083013567ffffffffffffffff811161024157876020610e3c92860101610719565b602083015260608301359167ffffffffffffffff831161024157610e6888602080969581960101610719565b6040820152815201920191610dcd565b91906080838203126102415760405190610e9182610600565b8193803567ffffffffffffffff81116102415782610eb0918301610719565b835260208101356020840152604081013567ffffffffffffffff81116102415782610edc918301610d1b565b604084015260608101359167ffffffffffffffff831161024157606092610d859201610d8a565b3590811515820361024157565b6020813603126102415760405190610f2782610670565b80359067ffffffffffffffff8211610241570136601f82011215610241578035610f5081610a06565b91610f5e604051938461068c565b81835260208084019260051b820101903682116102415760208101925b828410610f8b5750505050815290565b833567ffffffffffffffff8111610241578201906060601f1983360301126102415760405191610fba83610654565b60208101356002811015610241578352604081013567ffffffffffffffff811161024157610fee9060203691840101610e78565b6020840152606081013567ffffffffffffffff81116102415760209101019060a0823603126102415761101f6106ee565b92823567ffffffffffffffff81116102415761103e9036908501610719565b845261104c60208401610f03565b6020850152604083013567ffffffffffffffff8111610241576110729036908501610e78565b604085015261108360608401610f03565b606085015260808301359367ffffffffffffffff8511610241576110ae602095948695369101610e78565b60808201526040820152815201930192610f7b565b604051606091906110d4838261068c565b6002815291601f1901825f5b8281106110ec57505050565b6020906110f761094d565b828285010152016110e0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b905f19820191821161113e57565b611103565b9190820391821161113e57565b60408051909190611161838261068c565b60208152918290601f190190369060200137565b9061117f826106fd565b61118c604051918261068c565b828152601f1961119c82946106fd565b0190602036910137565b9081518111610807576111b881611175565b91816020808501920160045afa5090565b908151811015610a7a570160200190565b80518251808203611300575050908151602083012081516020830120146112fa575f5b82518110156112f35761123961121382856111c9565b517fff000000000000000000000000000000000000000000000000000000000000001690565b7fff0000000000000000000000000000000000000000000000000000000000000061128f61126a61121385876111c9565b7fff000000000000000000000000000000000000000000000000000000000000001690565b9116106112eb576112a361121382856111c9565b7fff000000000000000000000000000000000000000000000000000000000000006112d461126a61121385876111c9565b9116116112e3576001016111fd565b505050600190565b5050505f1990565b5050505f90565b50505f90565b808210156113cc57505b5f5b8181106113285750505190511115611323575f1990565b600190565b61133561121382856111c9565b7fff0000000000000000000000000000000000000000000000000000000000000061136661126a61121385896111c9565b9116106113c35761137a61121382856111c9565b7fff000000000000000000000000000000000000000000000000000000000000006113ab61126a61121385896111c9565b9116116113ba5760010161130c565b50505050600190565b505050505f1990565b905061130a565b6113db61094d565b506113e46106c0565b600181525f6020820152600160408201526113fd6109eb565b606082015261140a610a1e565b5f61141482610a6d565b52611421610af182610a7f565b6114296106cf565b9081526021602082015260046040820152600c60608201526114496109d7565b6080820152600160a082015261145d6106de565b5f81526001602082015291610b3f565b949390919481515115611638578215611610578151519581518781036115e0575080518781036115e057508051859392915f915b898310611530575050505050506115029293506040516114dc816114ce6020820194859190602083019252565b03601f19810183528261068c565b519020906040516114fa816114ce6020820194859190602083019252565b519020141590565b61150857565b7f5417b453000000000000000000000000000000000000000000000000000000005f5260045ffd5b9091929394965061155261154c6115478584611143565b611130565b83610a8f565b519661155f848751610a8f565b51805161156b816102b7565b611574816102b7565b6115b8576115a69160206115a292019961158e8b51611660565b809b5161159b898b610a8f565b51906116ef565b1590565b611508578694939260010191906114a1565b7fb05e92fa000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9a177708000000000000000000000000000000000000000000000000000000005f52600452602487905260445ffd5b7ff17ca146000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fc2e87803000000000000000000000000000000000000000000000000000000005f5260045ffd5b908151511580156116e8575b6116c057611685604083015183516020850151916118a5565b905f915b606084015180518410156116b9576116af6060926116a986600194610a8f565b51611954565b9301929050611689565b5092509050565b7f01e3bc0a000000000000000000000000000000000000000000000000000000005f5260045ffd5b505f61166c565b92939091936116fe8385611a42565b8351604051611715816114ce60208201948561075f565b5190209060405161172e816114ce60208201948561075f565b51902014908115916117de575b506117b65761174991612251565b604051611763816114ce6020820194859190602083019252565b51902090604051611781816114ce6020820194859190602083019252565b5190200361178e57600190565b7f5ade0455000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fdd2ccd03000000000000000000000000000000000000000000000000000000005f5260045ffd5b9050602083015114155f61173b565b5160038110156102c15790565b906001820180921161113e57565b906002820180921161113e57565b906003820180921161113e57565b906004820180921161113e57565b906005820180921161113e57565b906006820180921161113e57565b906007820180921161113e57565b906008820180921161113e57565b906009820180921161113e57565b90600a820180921161113e57565b9190820180921161113e57565b805191908290602001825e015f815290565b919091606081015160208201519060038210156102c1576118e56118cf6118df966118f394612379565b6040519687936020850190611893565b90611893565b03601f19810185528461068c565b6118fb611150565b916020830152604081015160038110156102c15761034a936119366119266118df9561194494612379565b6040519586936020850190611893565b03601f19810184528361068c565b519061194f826102c6565b6123ec565b908015611990578161194461198692611936602061034a96015191602060408601519160405197889583870190611893565b9081520190611893565b606460405162461bcd60e51b815260206004820152601260248201527f6d697373696e67206368696c64206861736800000000000000000000000000006044820152fd5b9063ffffffff8091169116029063ffffffff821691820361113e57565b9063ffffffff8091169116019063ffffffff821161113e57565b8115611a15570690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b90611a536115a26020830151151590565b612229576040820191606083510151928251611a6e816102b7565b611a77816102b7565b156121d6575b516040830190611a8d82516117ed565b815190611a99826102c6565b611aa2826102c6565b611aab816102c6565b0361219157611abd60208351016117ed565b602082015190611acc826102c6565b611ad5826102c6565b611ade816102c6565b03612126576040611af1818451016117ed565b91015190611afe826102c6565b611b07826102c6565b611b10816102c6565b036120bb57606090510151928351815110908115612075575b50611dda5760a082015163ffffffff1680611fb6575b508151611b4b816102b7565b611b54816102b7565b15611b5e57505050565b60600191825151925f5b848110611b76575050505050565b611b8e6020611b86838551610a8f565b51015161249f565b611b99828451610a8f565b519080611eed575b5050611bb36115a26060860151151590565b611ea857611bc2818351610a8f565b5160808501611bd460a08251016117ed565b825190611be0826102c6565b611be9826102c6565b611bf2816102c6565b03611e635784516020830190815151108015611e1f575b611dda57805151825160400151611c2a9063ffffffff165b63ffffffff1690565b11611d9557611c76611c21611c59611c47611c2186515151611130565b85516020015163ffffffff16906119d4565b92515192611c70606086510163ffffffff90511690565b906119f1565b10611d5057805160200151611c909063ffffffff16611c21565b15611d0b57611cb4611c2160206040611cba9501515193510163ffffffff90511690565b90611a0b565b611cc657600101611b68565b60405162461bcd60e51b815260206004820152601660248201527f496e6e657220737566666978206d616c666f726d6564000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e6e6572206368696c642073697a65206d757374203e3d31000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527f496e6e65722070726566697820746f6f206c6f6e6700000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527f496e6e65722070726566697820746f6f2073686f7274000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e636f727265637420707265666978206f6e206c65616600000000000000006044820152606490fd5b50611e5e6040516020810190611e39816114ce8b8561075f565b519020611e4983518951906111a6565b6040516114fa816114ce60208201948561075f565b611c09565b60405162461bcd60e51b815260206004820152601f60248201527f556e657870656374656420696e6e65722068617368206f7065726174696f6e006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527f496e6e65725370656320697320726571756972656400000000000000000000006044820152606490fd5b60018114159081611faa575b50611f655760019051611f0b816102c6565b611f14816102c6565b03611f20575f80611ba1565b60405162461bcd60e51b815260206004820152601260248201527f6261642068617368206f7065726174696f6e00000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527f6261642070726566697820696e20696e6e6572206f70000000000000000000006044820152606490fd5b6022915014155f611ef9565b60608201805151909163ffffffff1611612030575151611fe0611c2160c085015163ffffffff1690565b10611feb575f611b3f565b60405162461bcd60e51b815260206004820152601160248201527f546f6f206d616e7920496e6e65724f70730000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201527f546f6f2066657720496e6e65724f7073000000000000000000000000000000006044820152606490fd5b905061209c6040516020810190612090816114ce898561075f565b519020918551906111a6565b6040516120b1816114ce60208201948561075f565b519020145f611b29565b60405162461bcd60e51b815260206004820152602760248201527f556e6578706563746564206c65616620707265686173682076616c7565206f7060448201527f65726174696f6e000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f556e6578706563746564206c6561662070726568617368206b6579206f70657260448201527f6174696f6e0000000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601e60248201527f556e6578706563746564206c6561662068617368206f7065726174696f6e00006044820152606490fd5b6121df8461249f565b15611a7d5760405162461bcd60e51b815260206004820152601260248201527f6261642070726566697820696e206c65616600000000000000000000000000006044820152606490fd5b7f41449ff9000000000000000000000000000000000000000000000000000000005f5260045ffd5b9182515115801561235c575b6116c057612276604084015184516020860151916118a5565b905f915b6060850151805184101561235457906116a98461229693610a8f565b916122a46060850151151590565b6122b2575b6001019161227a565b60808401516020015163ffffffff1663ffffffff81166020119081612342575b50156122a95760405162461bcd60e51b8152602060048201526024808201527f496e76616c696420696e6e6572206f7065726174696f6e20286368696c645f7360448201527f697a6529000000000000000000000000000000000000000000000000000000006064820152608490fd5b6020915063ffffffff1610155f6122d2565b509350915050565b505f61225d565b9060078202918083046007149015171561113e57565b908051156123b95760206123936123ab9361034a936123ec565b61239b6125b6565b9060405194859284840190611893565b90815203808452018261068c565b7f93fc1cdc000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040513d5f823e3d90fd5b906123f6816102c6565b80612405575061034a906125ee565b61240e816102c6565b6001810361243f57505f61242a60209260405191828092611893565b039060025afa1561243a575f5190565b6123e1565b8061244b6002926102c6565b0361245a576020815191012090565b60405162461bcd60e51b815260206004820152601a60248201527f556e737570706f727465642068617368206f7065726174696f6e0000000000006044820152606490fd5b5f6124a982612642565b919060070b12612571576124be5f9183612672565b919060070b1261252c576124d35f9183612672565b919060070b126124e75761034a9151611143565b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642076657273696f6e20696e206c6561662070726566697800006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642073697a6520696e206c6561662070726566697800000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642068656967687420696e206c656166207072656669780000006044820152606490fd5b6040517f200000000000000000000000000000000000000000000000000000000000000060208201526001815261034a60218261068c565b805190602082106126025760209150015190565b60200151906020036020811161113e577f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116810361113e5760031b1c90565b5f61264c9161277a565b91906001677fffffffffffffff82821c1660070b911661266a579190565b1960070b9190565b9061264c9161277a565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff809116019063ffffffff821161113e57565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0009116019063ffffffff821161113e57565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe000009116019063ffffffff821161113e57565b63ffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000009116019063ffffffff821161113e57565b9067ffffffffffffffff8091169116019067ffffffffffffffff821161113e57565b91908251811015612c4657612790818451611143565b15612ba95760ff6127ad6127a761121384876111c9565b60f81c90565b169260808410156127c2575061034a906117fa565b9092600a6127d1858451611143565b118015612be6575b15612aed576127e79061267c565b608061281860ff6128066127a76112136128008a6117fa565b886111c9565b1692600784901b63ffffff8016611c70565b9110612adc57612827906126b3565b608061285260ff6128406127a76112136128008a611808565b1692600e84901b63ffffc00016611c70565b9110612acb57612861906126ea565b608061288c60ff61287a6127a76112136128008a611816565b1692601584901b63ffe0000016611c70565b9110612ab457611c2161289e91612721565b9060ff6128b96127a76112136128b388611824565b856111c9565b1660808110612a92576128cb9061267c565b60806128e460ff6128066127a76112136128008b611832565b9110612a70576128f3906126b3565b608061290c60ff6128406127a76112136128008b611840565b9110612a4e5761291b906126ea565b91608061294760ff6129356127a76112136128008b61184e565b1694601586901b63ffe0000016611c70565b9310612a2d57612970612960611c216129769495612721565b601c1b67fffffffff00000001690565b90612758565b9060ff61298b6127a76112136128b38861185c565b1660808110612a0b576129bd60ff6128066127a76112136129ad60029661267c565b966129b78b61186a565b906111c9565b91106129eb577f473b8722000000000000000000000000000000000000000000000000000000005f5260045ffd5b61034a91612a059160381b67ff0000000000000016612970565b92611878565b61034a92612a2792509060381b67ff0000000000000016612970565b9261186a565b61034a92612a489250601c1b670ffffffff000000016612970565b9261185c565b61034a92612a6a925090601c1b670ffffffff000000016612970565b9261184e565b61034a92612a8c925090601c1b670ffffffff000000016612970565b92611840565b61034a92612aae925090601c1b67fffffffff000000016612970565b92611832565b9263ffffffff9150612ac590611824565b92169190565b9263ffffffff9150612ac590611816565b9263ffffffff9150612ac590611808565b5091905f92612afd838251611143565b600a811015612bdd57925b5f5b848110612b39577f473b8722000000000000000000000000000000000000000000000000000000005f5260045ffd5b60ff612b546127a7611213612b4e8587611886565b876111c9565b96612b74612b6184612363565b607f8a16901b67ffffffffffffffff1690565b179616607f811115612b895750600101612b0a565b92508093945060099150149081612bd1575b50612ba95761034a906117fa565b7f473b8722000000000000000000000000000000000000000000000000000000005f5260045ffd5b6002915010155f612b9b565b50600a92612b08565b507f80000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612c3f611213612c398651611130565b866111c9565b16106127d9565b7f01da1572000000000000000000000000000000000000000000000000000000005f5260045ffdfea164736f6c634300081c000a",
}

// ContractMembershipABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMembershipMetaData.ABI instead.
var ContractMembershipABI = ContractMembershipMetaData.ABI

// ContractMembershipBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMembershipMetaData.Bin instead.
var ContractMembershipBin = ContractMembershipMetaData.Bin

// DeployContractMembership deploys a new Ethereum contract, binding an instance of ContractMembership to it.
func DeployContractMembership(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContractMembership, error) {
	parsed, err := ContractMembershipMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractMembershipBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractMembership{ContractMembershipCaller: ContractMembershipCaller{contract: contract}, ContractMembershipTransactor: ContractMembershipTransactor{contract: contract}, ContractMembershipFilterer: ContractMembershipFilterer{contract: contract}}, nil
}

// ContractMembership is an auto generated Go binding around an Ethereum contract.
type ContractMembership struct {
	ContractMembershipCaller     // Read-only binding to the contract
	ContractMembershipTransactor // Write-only binding to the contract
	ContractMembershipFilterer   // Log filterer for contract events
}

// ContractMembershipCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractMembershipCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMembershipTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractMembershipTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMembershipFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractMembershipFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMembershipSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractMembershipSession struct {
	Contract     *ContractMembership // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractMembershipCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractMembershipCallerSession struct {
	Contract *ContractMembershipCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ContractMembershipTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractMembershipTransactorSession struct {
	Contract     *ContractMembershipTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ContractMembershipRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractMembershipRaw struct {
	Contract *ContractMembership // Generic contract binding to access the raw methods on
}

// ContractMembershipCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractMembershipCallerRaw struct {
	Contract *ContractMembershipCaller // Generic read-only contract binding to access the raw methods on
}

// ContractMembershipTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractMembershipTransactorRaw struct {
	Contract *ContractMembershipTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractMembership creates a new instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembership(address common.Address, backend bind.ContractBackend) (*ContractMembership, error) {
	contract, err := bindContractMembership(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractMembership{ContractMembershipCaller: ContractMembershipCaller{contract: contract}, ContractMembershipTransactor: ContractMembershipTransactor{contract: contract}, ContractMembershipFilterer: ContractMembershipFilterer{contract: contract}}, nil
}

// NewContractMembershipCaller creates a new read-only instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembershipCaller(address common.Address, caller bind.ContractCaller) (*ContractMembershipCaller, error) {
	contract, err := bindContractMembership(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipCaller{contract: contract}, nil
}

// NewContractMembershipTransactor creates a new write-only instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembershipTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractMembershipTransactor, error) {
	contract, err := bindContractMembership(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipTransactor{contract: contract}, nil
}

// NewContractMembershipFilterer creates a new log filterer instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembershipFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractMembershipFilterer, error) {
	contract, err := bindContractMembership(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipFilterer{contract: contract}, nil
}

// bindContractMembership binds a generic wrapper to an already deployed contract.
func bindContractMembership(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMembershipMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMembership *ContractMembershipRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMembership.Contract.ContractMembershipCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMembership *ContractMembershipRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMembership.Contract.ContractMembershipTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMembership *ContractMembershipRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMembership.Contract.ContractMembershipTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMembership *ContractMembershipCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMembership.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMembership *ContractMembershipTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMembership.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMembership *ContractMembershipTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMembership.Contract.contract.Transact(opts, method, params...)
}

// CompareBytes is a free data retrieval call binding the contract method 0xd259183d.
//
// Solidity: function compareBytes(bytes a, bytes b) pure returns(int8)
func (_ContractMembership *ContractMembershipCaller) CompareBytes(opts *bind.CallOpts, a []byte, b []byte) (int8, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "compareBytes", a, b)

	if err != nil {
		return *new(int8), err
	}

	out0 := *abi.ConvertType(out[0], new(int8)).(*int8)

	return out0, err

}

// CompareBytes is a free data retrieval call binding the contract method 0xd259183d.
//
// Solidity: function compareBytes(bytes a, bytes b) pure returns(int8)
func (_ContractMembership *ContractMembershipSession) CompareBytes(a []byte, b []byte) (int8, error) {
	return _ContractMembership.Contract.CompareBytes(&_ContractMembership.CallOpts, a, b)
}

// CompareBytes is a free data retrieval call binding the contract method 0xd259183d.
//
// Solidity: function compareBytes(bytes a, bytes b) pure returns(int8)
func (_ContractMembership *ContractMembershipCallerSession) CompareBytes(a []byte, b []byte) (int8, error) {
	return _ContractMembership.Contract.CompareBytes(&_ContractMembership.CallOpts, a, b)
}

// GetSlice is a free data retrieval call binding the contract method 0x5bf145a2.
//
// Solidity: function getSlice(bytes array, uint256 from, uint256 to) view returns(bytes)
func (_ContractMembership *ContractMembershipCaller) GetSlice(opts *bind.CallOpts, array []byte, from *big.Int, to *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "getSlice", array, from, to)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetSlice is a free data retrieval call binding the contract method 0x5bf145a2.
//
// Solidity: function getSlice(bytes array, uint256 from, uint256 to) view returns(bytes)
func (_ContractMembership *ContractMembershipSession) GetSlice(array []byte, from *big.Int, to *big.Int) ([]byte, error) {
	return _ContractMembership.Contract.GetSlice(&_ContractMembership.CallOpts, array, from, to)
}

// GetSlice is a free data retrieval call binding the contract method 0x5bf145a2.
//
// Solidity: function getSlice(bytes array, uint256 from, uint256 to) view returns(bytes)
func (_ContractMembership *ContractMembershipCallerSession) GetSlice(array []byte, from *big.Int, to *big.Int) ([]byte, error) {
	return _ContractMembership.Contract.GetSlice(&_ContractMembership.CallOpts, array, from, to)
}

// IavlSpec is a free data retrieval call binding the contract method 0xf7b075a8.
//
// Solidity: function iavlSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCaller) IavlSpec(opts *bind.CallOpts) (IMembershipMsgsProofSpec, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "iavlSpec")

	if err != nil {
		return *new(IMembershipMsgsProofSpec), err
	}

	out0 := *abi.ConvertType(out[0], new(IMembershipMsgsProofSpec)).(*IMembershipMsgsProofSpec)

	return out0, err

}

// IavlSpec is a free data retrieval call binding the contract method 0xf7b075a8.
//
// Solidity: function iavlSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipSession) IavlSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.IavlSpec(&_ContractMembership.CallOpts)
}

// IavlSpec is a free data retrieval call binding the contract method 0xf7b075a8.
//
// Solidity: function iavlSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCallerSession) IavlSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.IavlSpec(&_ContractMembership.CallOpts)
}

// TendermintSpec is a free data retrieval call binding the contract method 0x002cf8c0.
//
// Solidity: function tendermintSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCaller) TendermintSpec(opts *bind.CallOpts) (IMembershipMsgsProofSpec, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "tendermintSpec")

	if err != nil {
		return *new(IMembershipMsgsProofSpec), err
	}

	out0 := *abi.ConvertType(out[0], new(IMembershipMsgsProofSpec)).(*IMembershipMsgsProofSpec)

	return out0, err

}

// TendermintSpec is a free data retrieval call binding the contract method 0x002cf8c0.
//
// Solidity: function tendermintSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipSession) TendermintSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.TendermintSpec(&_ContractMembership.CallOpts)
}

// TendermintSpec is a free data retrieval call binding the contract method 0x002cf8c0.
//
// Solidity: function tendermintSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCallerSession) TendermintSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.TendermintSpec(&_ContractMembership.CallOpts)
}

// Membership is a paid mutator transaction binding the contract method 0x13542b7a.
//
// Solidity: function membership(bytes32 appHash, (bytes[],bytes32)[] kvPairs, ((uint8,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),(bytes,bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[])))[])[] merkleProofs) returns((bytes32,(bytes[],bytes32)[]) output)
func (_ContractMembership *ContractMembershipTransactor) Membership(opts *bind.TransactOpts, appHash [32]byte, kvPairs []IMembershipMsgsKVPair, merkleProofs []IMembershipMsgsMerkleProof) (*types.Transaction, error) {
	return _ContractMembership.contract.Transact(opts, "membership", appHash, kvPairs, merkleProofs)
}

// Membership is a paid mutator transaction binding the contract method 0x13542b7a.
//
// Solidity: function membership(bytes32 appHash, (bytes[],bytes32)[] kvPairs, ((uint8,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),(bytes,bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[])))[])[] merkleProofs) returns((bytes32,(bytes[],bytes32)[]) output)
func (_ContractMembership *ContractMembershipSession) Membership(appHash [32]byte, kvPairs []IMembershipMsgsKVPair, merkleProofs []IMembershipMsgsMerkleProof) (*types.Transaction, error) {
	return _ContractMembership.Contract.Membership(&_ContractMembership.TransactOpts, appHash, kvPairs, merkleProofs)
}

// Membership is a paid mutator transaction binding the contract method 0x13542b7a.
//
// Solidity: function membership(bytes32 appHash, (bytes[],bytes32)[] kvPairs, ((uint8,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),(bytes,bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[])))[])[] merkleProofs) returns((bytes32,(bytes[],bytes32)[]) output)
func (_ContractMembership *ContractMembershipTransactorSession) Membership(appHash [32]byte, kvPairs []IMembershipMsgsKVPair, merkleProofs []IMembershipMsgsMerkleProof) (*types.Transaction, error) {
	return _ContractMembership.Contract.Membership(&_ContractMembership.TransactOpts, appHash, kvPairs, merkleProofs)
}

// ContractMembershipMembershipVerifiedIterator is returned from FilterMembershipVerified and is used to iterate over the raw logs and unpacked data for MembershipVerified events raised by the ContractMembership contract.
type ContractMembershipMembershipVerifiedIterator struct {
	Event *ContractMembershipMembershipVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMembershipMembershipVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMembershipMembershipVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMembershipMembershipVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMembershipMembershipVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMembershipMembershipVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMembershipMembershipVerified represents a MembershipVerified event raised by the ContractMembership contract.
type ContractMembershipMembershipVerified struct {
	CommitmentRoot [32]byte
	PairsCount     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterMembershipVerified is a free log retrieval operation binding the contract event 0x14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d9.
//
// Solidity: event MembershipVerified(bytes32 indexed commitmentRoot, uint256 pairsCount)
func (_ContractMembership *ContractMembershipFilterer) FilterMembershipVerified(opts *bind.FilterOpts, commitmentRoot [][32]byte) (*ContractMembershipMembershipVerifiedIterator, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.FilterLogs(opts, "MembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipMembershipVerifiedIterator{contract: _ContractMembership.contract, event: "MembershipVerified", logs: logs, sub: sub}, nil
}

// WatchMembershipVerified is a free log subscription operation binding the contract event 0x14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d9.
//
// Solidity: event MembershipVerified(bytes32 indexed commitmentRoot, uint256 pairsCount)
func (_ContractMembership *ContractMembershipFilterer) WatchMembershipVerified(opts *bind.WatchOpts, sink chan<- *ContractMembershipMembershipVerified, commitmentRoot [][32]byte) (event.Subscription, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.WatchLogs(opts, "MembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMembershipMembershipVerified)
				if err := _ContractMembership.contract.UnpackLog(event, "MembershipVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMembershipVerified is a log parse operation binding the contract event 0x14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d9.
//
// Solidity: event MembershipVerified(bytes32 indexed commitmentRoot, uint256 pairsCount)
func (_ContractMembership *ContractMembershipFilterer) ParseMembershipVerified(log types.Log) (*ContractMembershipMembershipVerified, error) {
	event := new(ContractMembershipMembershipVerified)
	if err := _ContractMembership.contract.UnpackLog(event, "MembershipVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMembershipNonMembershipVerifiedIterator is returned from FilterNonMembershipVerified and is used to iterate over the raw logs and unpacked data for NonMembershipVerified events raised by the ContractMembership contract.
type ContractMembershipNonMembershipVerifiedIterator struct {
	Event *ContractMembershipNonMembershipVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMembershipNonMembershipVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMembershipNonMembershipVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMembershipNonMembershipVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMembershipNonMembershipVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMembershipNonMembershipVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMembershipNonMembershipVerified represents a NonMembershipVerified event raised by the ContractMembership contract.
type ContractMembershipNonMembershipVerified struct {
	CommitmentRoot [32]byte
	Key            [][]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNonMembershipVerified is a free log retrieval operation binding the contract event 0x6d496ee75e8a922548b36e0a6080961577444d51d6a55179aa3e986fcd801a3d.
//
// Solidity: event NonMembershipVerified(bytes32 indexed commitmentRoot, bytes[] key)
func (_ContractMembership *ContractMembershipFilterer) FilterNonMembershipVerified(opts *bind.FilterOpts, commitmentRoot [][32]byte) (*ContractMembershipNonMembershipVerifiedIterator, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.FilterLogs(opts, "NonMembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipNonMembershipVerifiedIterator{contract: _ContractMembership.contract, event: "NonMembershipVerified", logs: logs, sub: sub}, nil
}

// WatchNonMembershipVerified is a free log subscription operation binding the contract event 0x6d496ee75e8a922548b36e0a6080961577444d51d6a55179aa3e986fcd801a3d.
//
// Solidity: event NonMembershipVerified(bytes32 indexed commitmentRoot, bytes[] key)
func (_ContractMembership *ContractMembershipFilterer) WatchNonMembershipVerified(opts *bind.WatchOpts, sink chan<- *ContractMembershipNonMembershipVerified, commitmentRoot [][32]byte) (event.Subscription, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.WatchLogs(opts, "NonMembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMembershipNonMembershipVerified)
				if err := _ContractMembership.contract.UnpackLog(event, "NonMembershipVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNonMembershipVerified is a log parse operation binding the contract event 0x6d496ee75e8a922548b36e0a6080961577444d51d6a55179aa3e986fcd801a3d.
//
// Solidity: event NonMembershipVerified(bytes32 indexed commitmentRoot, bytes[] key)
func (_ContractMembership *ContractMembershipFilterer) ParseNonMembershipVerified(log types.Log) (*ContractMembershipNonMembershipVerified, error) {
	event := new(ContractMembershipNonMembershipVerified)
	if err := _ContractMembership.contract.UnpackLog(event, "NonMembershipVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
